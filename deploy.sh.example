#!/bin/bash

# ==============================================
# CONFIGURATIE - PAS DIT AAN VOOR JOUW SERVER
# ==============================================
NEXTCLOUD_USER="your_username"           # SSH gebruikersnaam
NEXTCLOUD_HOST="your_server_ip"          # Server hostname of IP
NEXTCLOUD_PATH="/var/www/nextcloud/apps/introvox"  # Pad naar app op server
SSH_KEY="~/.ssh/your_key"                # Pad naar je SSH key

# ==============================================
# SCRIPT - HIERONDER HOEF JE NIETS AAN TE PASSEN
# ==============================================

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üöÄ Deploying Nextcloud First Use Wizard...${NC}"
echo ""

# Check of we in de juiste directory zitten
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Error: Not in project directory (package.json not found)${NC}"
    exit 1
fi

# Check of build bestaat (kan in js/ of js/src/ zitten afhankelijk van setup)
if [ -f "js/main.js" ]; then
    BUILD_FILE="js/main.js"
    echo -e "${GREEN}‚úì${NC} Found build: js/main.js"
elif [ -f "js/dist/main.js" ]; then
    BUILD_FILE="js/dist/main.js"
    echo -e "${GREEN}‚úì${NC} Found build: js/dist/main.js"
else
    echo -e "${YELLOW}‚ö†${NC}  Build not found. Running build..."
    npm run build
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Build failed!${NC}"
        exit 1
    fi
    # Check again after build
    if [ -f "js/main.js" ]; then
        BUILD_FILE="js/main.js"
    elif [ -f "js/dist/main.js" ]; then
        BUILD_FILE="js/dist/main.js"
    else
        echo -e "${RED}‚ùå Build file still not found after build!${NC}"
        exit 1
    fi
fi

# Verify build file size
FILE_SIZE=$(wc -c < "$BUILD_FILE" 2>/dev/null)
if [ $FILE_SIZE -lt 10000 ]; then
    echo -e "${RED}‚ùå Build file is too small ($FILE_SIZE bytes). Build might have failed.${NC}"
    exit 1
fi

echo -e "${GREEN}‚úì${NC} Build verified: $FILE_SIZE bytes"
echo ""

# Create temporary directory
TEMP_DIR=$(mktemp -d)
APP_NAME="introvox"

echo -e "${YELLOW}üì¶ Creating deployment package...${NC}"

# Copy files to temp directory
mkdir -p "$TEMP_DIR/$APP_NAME"

# Copy appinfo
if [ -d "appinfo" ]; then
    cp -r appinfo "$TEMP_DIR/$APP_NAME/"
    echo "  ‚úì appinfo/"
else
    echo -e "${RED}  ‚úó appinfo/ not found!${NC}"
    rm -rf "$TEMP_DIR"
    exit 1
fi

# Copy lib
if [ -d "lib" ]; then
    cp -r lib "$TEMP_DIR/$APP_NAME/"
    echo "  ‚úì lib/"
else
    echo -e "${RED}  ‚úó lib/ not found!${NC}"
    rm -rf "$TEMP_DIR"
    exit 1
fi

# Copy css
if [ -d "css" ]; then
    cp -r css "$TEMP_DIR/$APP_NAME/"
    echo "  ‚úì css/"
else
    echo -e "${YELLOW}  ‚ö† css/ not found (optional)${NC}"
fi

# Copy img (optional)
if [ -d "img" ]; then
    cp -r img "$TEMP_DIR/$APP_NAME/"
    echo "  ‚úì img/"
fi

# Copy templates (optional, for admin page)
if [ -d "templates" ]; then
    cp -r templates "$TEMP_DIR/$APP_NAME/"
    echo "  ‚úì templates/"
fi

# Copy l10n (translations)
if [ -d "l10n" ]; then
    cp -r l10n "$TEMP_DIR/$APP_NAME/"
    echo "  ‚úì l10n/"
else
    echo -e "${YELLOW}  ‚ö† l10n/ not found (translations will not be available)${NC}"
fi

# Copy JavaScript builds
mkdir -p "$TEMP_DIR/$APP_NAME/js"
cp "$BUILD_FILE" "$TEMP_DIR/$APP_NAME/js/main.js"
echo "  ‚úì js/main.js"
if [ -f "js/admin.js" ]; then
    cp js/admin.js "$TEMP_DIR/$APP_NAME/js/admin.js"
    echo "  ‚úì js/admin.js"
fi
if [ -f "js/personal.js" ]; then
    cp js/personal.js "$TEMP_DIR/$APP_NAME/js/personal.js"
    echo "  ‚úì js/personal.js"
fi

# Create security index.php files
echo "<?php" > "$TEMP_DIR/$APP_NAME/index.php"
echo "<?php" > "$TEMP_DIR/$APP_NAME/js/index.php"
echo "<?php" > "$TEMP_DIR/$APP_NAME/css/index.php"
echo "<?php" > "$TEMP_DIR/$APP_NAME/lib/index.php"
echo "<?php" > "$TEMP_DIR/$APP_NAME/lib/AppInfo/index.php"

# Create tarball
cd "$TEMP_DIR"
tar -czf "$APP_NAME.tar.gz" "$APP_NAME"

echo ""
echo -e "${YELLOW}üì§ Uploading to $NEXTCLOUD_HOST...${NC}"

# Upload to server
scp -i "$SSH_KEY" "$APP_NAME.tar.gz" "$NEXTCLOUD_USER@$NEXTCLOUD_HOST:/tmp/"

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Upload failed! Check SSH connection.${NC}"
    echo ""
    echo "Debug tips:"
    echo "  - Check if SSH key exists: ls -l $SSH_KEY"
    echo "  - Test SSH connection: ssh -i $SSH_KEY $NEXTCLOUD_USER@$NEXTCLOUD_HOST"
    rm -rf "$TEMP_DIR"
    exit 1
fi

echo -e "${GREEN}‚úì${NC} Upload complete"
echo ""
echo -e "${YELLOW}üîß Installing on server...${NC}"

# Install on server
ssh -i "$SSH_KEY" "$NEXTCLOUD_USER@$NEXTCLOUD_HOST" << 'ENDSSH'
set -e

# Colors for remote output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

cd /tmp

# Remove old version
if [ -d "/var/www/nextcloud/apps/introvox" ]; then
    echo -e "  ${YELLOW}Removing old version...${NC}"
    sudo rm -rf /var/www/nextcloud/apps/introvox
fi

# Extract new version
echo -e "  ${YELLOW}Extracting files...${NC}"
sudo tar -xzf introvox.tar.gz -C /var/www/nextcloud/apps/

# Fix permissions
echo -e "  ${YELLOW}Setting permissions...${NC}"
sudo chown -R www-data:www-data /var/www/nextcloud/apps/introvox
sudo chmod -R 755 /var/www/nextcloud/apps/introvox

# Clear Nextcloud frontend cache
echo -e "  ${YELLOW}Clearing frontend cache...${NC}"
sudo rm -rf /var/www/nextcloud/data/appdata_*/js/* 2>/dev/null || true
sudo rm -rf /var/www/nextcloud/data/appdata_*/css/* 2>/dev/null || true

# Enable app (disable first to reload)
echo -e "  ${YELLOW}Enabling app...${NC}"
sudo -u www-data php /var/www/nextcloud/occ app:disable introvox 2>/dev/null || true
sudo -u www-data php /var/www/nextcloud/occ app:enable introvox

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Failed to enable app${NC}"
    exit 1
fi

# Verify deployment
echo -e "  ${YELLOW}Verifying deployment...${NC}"
if [ -f "/var/www/nextcloud/apps/introvox/js/main.js" ]; then
    FILE_SIZE=$(wc -c < "/var/www/nextcloud/apps/introvox/js/main.js")
    echo -e "  ${GREEN}‚úì${NC} main.js deployed: $FILE_SIZE bytes"
else
    echo -e "  ${RED}‚úó${NC} main.js NOT found on server!"
    exit 1
fi

# Cleanup
rm introvox.tar.gz

echo -e "${GREEN}‚úÖ App installed and enabled${NC}"
ENDSSH

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Installation failed!${NC}"
    rm -rf "$TEMP_DIR"
    exit 1
fi

# Cleanup local temp directory
rm -rf "$TEMP_DIR"

echo ""
echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${GREEN}‚úÖ Deployment successful!${NC}"
echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo ""
echo -e "${BLUE}Next steps:${NC}"
echo "  1. Go to your Nextcloud in browser"
echo "  2. ${YELLOW}HARD REFRESH (belangrijk!):${NC}"
echo "     - Mac: Cmd+Shift+R"
echo "     - Windows/Linux: Ctrl+Shift+R"
echo "     - Or: Clear browser cache completely"
echo "  3. Open Console (F12)"
echo "  4. Look for: 'üé® Nextcloud First Use Wizard (Vue 3) initialized'"
echo ""
echo -e "${BLUE}Test the wizard:${NC}"
echo "  window.nextcloudWizard.reset()"
echo "  window.nextcloudWizard.start()"
echo ""
echo -e "${YELLOW}Troubleshooting:${NC}"
echo "  - If wizard doesn't appear, check console for errors"
echo "  - Verify file size matches: should be ~115KB"
echo "  - Try incognito/private browsing mode"
echo ""
